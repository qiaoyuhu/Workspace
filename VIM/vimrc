
" *************** 设置全局快捷键 *****************
set ruler "显示光标位置
set wildmenu "vim命令自动补全
set smartindent
" 智能对齐

set autoindent
" 自动对齐

set cindent
"使用C/C++语言缩进方式

set confirm
" 在处理未保存或只读文件的时候，弹出确认

set tabstop=8
" Tab键的宽度

set softtabstop=8
set shiftwidth=8
"  统一缩进为4

set noexpandtab
" 不要用空格代替制表符

set number
" 显示行号

set history=50
" 历史纪录数

set hlsearch
set incsearch
" 搜索逐字符高亮

syntax enable
set background=dark
"colorscheme default
colorscheme solarized
"colorscheme molokai
" 设置颜色主题

set mouse=a
" use mouse

syntax on
" 语法高亮

set cmdheight=2
" 命令行（在状态行）的高度，默认为1,这里是2

set ruler
" 在编辑过程中，在右下角显示光标位置的状态行

set laststatus=2
" 总是显示状态行

set showcmd
" 在状态行显示目前所执行的命令，未完成的指令片段亦会显示出来

set scrolloff=3
" 光标移动到buffer的顶部和底部时保持3行距离

set showmatch
" 高亮显示对应的括号

set matchtime=5
" 对应括号高亮的时间（单位是十分之一秒）

func! CompileRunGcc()
	exec "w"
	if &filetype == 'c'
	exec "!gcc % -o %<"
	exec "!./%<"
	elseif &filetype =='cpp'
	exec "!g++ % -o %<"
	exec "!./%<"
	endif
endfunc

map <F5> :call CompileRunGcc()<CR>




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""新文件标题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"新建.c,.h,.sh,.java文件，自动插入文件头 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" 
	""定义函数SetTitle，自动插入文件头 
func SetTitle() 
	"如果文件类型为.sh文件 
	if &filetype == 'sh' 
	call setline(1, "##########################################################################") 
	call append(line("."), "# File Name: ".expand("%")) 
	call append(line(".")+1, "# Author: qiaoyuhu") 
	call append(line(".")+2, "# mail: yuhuqiao@163.com") 
	call append(line(".")+3, "# Created Time: ".strftime("%c")) 
	call append(line(".")+4, "#########################################################################") 
	call append(line(".")+5, "#!/bin/zsh")
	call append(line(".")+6, "PATH=/home/edison/bin:/home/edison/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/work/tools/gcc-3.4.5-glibc-2.3.6/bin")
	call append(line(".")+7, "export PATH")
	call append(line(".")+8, "")
	else 
	call setline(1, "/*************************************************************************") 
	call append(line("."), "	> File Name: ".expand("%")) 
	call append(line(".")+1, "	> Author: qiaoyuhu") 
	call append(line(".")+2, "	> Mail: yuhuqiao@163.com ") 
	call append(line(".")+3, "	> Created Time: ".strftime("%c")) 
	call append(line(".")+4, " ************************************************************************/") 
	call append(line(".")+5, "")
	endif
	if &filetype == 'cpp'
	call append(line(".")+6, "#include <iostream>")
	call append(line(".")+7, "using namespace std;")
	call append(line(".")+8, "")
	endif
	if &filetype == 'c'
	call append(line(".")+6, "#include <stdio.h>")
	call append(line(".")+7, "")
	endif
	"	if &filetype == 'java'
	"		call append(line(".")+6,"public class ".expand("%"))
	"		call append(line(".")+7,"")
	"	endif
	"新建文件后，自动定位到文件末尾
	autocmd BufNewFile * normal G
	endfunc




	" *************** 设置全局快捷键 *****************

	"**********************设置插件****************************
	set nocompatible              " 这是必需的 
	"filetype off                  " 这是必需的    打开后颜色失效？

	set rtp+=~/.vim/bundle/Vundle.vim  
	" vundle初始化 

call vundle#begin()  
	"    这应该始终是第一个 

	Plugin 'gmarik/Vundle.vim'		" 格式为 Plugin '用户名/插件仓库名'
	"     该例子来自https://github.com/gmarik/Vundle.vim README 

	Plugin 'Valloric/YouCompleteMe'
	"安装自动补全插件
	Plugin 'scrooloose/nerdtree'
	" 安装目录树插件

call vundle#end()  
	" required 

	" NerdTree才插件的配置信息
	"将F3设置为开关NERDTree的快捷键
	map <F2> :NERDTreeToggle<cr>
	""修改树的显示图标
	let g:NERDTreeDirArrowExpandable = '+'
	let g:NERDTreeDirArrowCollapsible = '-'
	""窗口位置
	let g:NERDTreeWinPos='left'
	""窗口尺寸
	let g:NERDTreeSize=30
	""窗口是否显示行号
	let g:NERDTreeShowLineNumbers=1
	""不显示隐藏文件
	let g:NERDTreeHidden=0

	 let mapleader=","
	let g:ycm_server_python_interpreter='/usr/bin/python3'
	let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
	"nnoremap <leader>jd:YcmCompleter GoToDefinitionElseDeclaration<CR>
	" 跳到定义或声明  
	nnoremap jd :YcmCompleter GoToDefinitionElseDeclaration<CR>  
"	nnoremap <F5> :YcmCompleter GoToDefinitionElseDeclaration<CR>  
	" 强制进行编译  
	nnoremap <F6> :YcmForceCompileAndDiagnostics<CR> 
	"自动补全设置
	"**********************设置插件****************************
